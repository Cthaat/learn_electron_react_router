# 工作流名称：发布Electron应用程序
# 这个工作流负责创建正式发布版本并上传到GitHub Releases
name: Release Electron App

# 触发条件：仅当推送标签(tag)时触发
# 标签必须以"v"开头，如v1.0.0、v0.1.0等
on:
  push:
    tags:
      - "v*"

# 工作流中的工作定义
jobs:
  # 定义一个名为"build"的工作
  build:
    # 工作的显示名称，包含运行的操作系统信息
    name: Build (${{ matrix.os }})
    # 指定此工作在哪个操作系统上运行
    runs-on: ${{ matrix.os }}
    # 策略配置，用于设置矩阵构建
    strategy:
      # 如果一个操作系统的构建失败，其他操作系统的构建仍然继续
      fail-fast: false
      # 矩阵定义：在3种操作系统上并行构建
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    # 工作中的步骤列表
    steps:
      # 步骤1: 检出代码库
      # 这一步会将你的GitHub仓库代码下载到Action运行的虚拟机上
      - name: Check out Git repository
        uses: actions/checkout@v4

      # 步骤2: 设置Node.js环境
      # 安装指定版本的Node.js并配置缓存提高效率
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # 使用Node.js 20版本
          node-version: 20
          # 启用yarn包管理器的缓存
          cache: "yarn"

      # 步骤3: 清理之前的构建产物
      # 防止因为构建目录存在而导致的错误
      - name: Clean build directory
        run: |
          rm -rf dist || true
          mkdir -p dist
        shell: bash

      # 步骤4: 为macOS准备图标文件
      # 在macOS环境下将PNG图标转换为ICNS格式
      - name: Prepare macOS icon
        if: matrix.os == 'macos-latest'
        run: |
          echo "正在生成macOS图标文件..."
          # 创建iconset目录
          mkdir -p IconSet.iconset
          # 从PNG生成不同尺寸的图标
          sips -z 16 16 public/icon.png --out IconSet.iconset/icon_16x16.png
          sips -z 32 32 public/icon.png --out IconSet.iconset/icon_16x16@2x.png
          sips -z 32 32 public/icon.png --out IconSet.iconset/icon_32x32.png
          sips -z 64 64 public/icon.png --out IconSet.iconset/icon_32x32@2x.png
          sips -z 128 128 public/icon.png --out IconSet.iconset/icon_128x128.png
          sips -z 256 256 public/icon.png --out IconSet.iconset/icon_128x128@2x.png
          sips -z 256 256 public/icon.png --out IconSet.iconset/icon_256x256.png
          sips -z 512 512 public/icon.png --out IconSet.iconset/icon_256x256@2x.png
          sips -z 512 512 public/icon.png --out IconSet.iconset/icon_512x512.png
          sips -z 1024 1024 public/icon.png --out IconSet.iconset/icon_512x512@2x.png
          # 生成icns文件
          iconutil -c icns IconSet.iconset -o public/icon.icns
          echo "ICNS图标文件已生成在 public/icon.icns"
        shell: bash

      # 步骤5: 从package.json文件提取版本号
      # 这一步很重要，它读取你项目中的版本信息，用于后续文件命名
      - name: Get Version from package.json
        id: get-version # 设置步骤ID，便于后续步骤引用这一步的输出
        run: |
          # 使用grep和cut命令从package.json中提取版本号
          VERSION=$(cat package.json | grep -o '"version": *"[^"]*"' | cut -d'"' -f4)
          # 打印版本号（用于调试）
          echo "Package version: $VERSION"
          # 将版本号保存为此步骤的输出变量
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        # 指定使用bash shell执行命令，确保跨平台兼容性
        shell: bash

      # 步骤6: 安装项目依赖
      # 使用yarn包管理器安装项目所需的所有依赖
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 步骤7: 打印package.json中的版本信息（调试用）
      - name: Print package.json version
        run: |
          echo "Package.json version:"
          cat package.json | grep version
        shell: bash

      # 步骤8: 构建macOS版本应用
      # 仅在macOS操作系统上运行
      - name: Build macOS App
        if: matrix.os == 'macos-latest'
        # 执行在package.json中定义的dist:mac脚本
        run: yarn dist:mac
        # 设置环境变量，提供GitHub令牌用于授权
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # 步骤9: 构建Windows版本应用
      # 仅在Windows操作系统上运行
      - name: Build Windows App
        if: matrix.os == 'windows-latest'
        # 修改构建命令，与本地构建保持一致
        run: yarn dist:win
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # 步骤10: 构建Linux版本应用
      # 仅在Linux操作系统上运行
      - name: Build Linux App
        if: matrix.os == 'ubuntu-latest'
        # 执行在package.json中定义的dist:linux脚本
        run: yarn dist:linux
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # 步骤11: 列出构建产物目录内容（Unix系统）
      # 这是调试用的步骤，帮助你查看生成了哪些文件
      - name: List dist directory (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Dist directory contents:"
          ls -la dist/
        shell: bash

      # 步骤12: 列出构建产物目录内容（Windows系统）
      # Windows使用不同的命令列出文件
      - name: List dist directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Dist directory contents:"
          Get-ChildItem -Path dist/ -Force
        shell: pwsh

      # 步骤13: 准备发布资产的路径
      # 根据不同操作系统，构建不同的文件路径
      - name: Prepare asset paths
        id: prepare-assets # 设置步骤ID，便于后续步骤引用
        run: |
          # 根据操作系统不同，设置不同的文件路径
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            # 检查是否有 arm64 版本的 DMG 文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-arm64.dmg" ]; then
              echo "已找到 arm64 版本的 DMG 文件"
              echo "arm64_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-arm64.dmg" >> "$GITHUB_OUTPUT"
              echo "arm64_name=System-Resource-Monitor-mac-arm64.dmg" >> "$GITHUB_OUTPUT"
            fi
            
            # 检查是否有 x64 版本的 DMG 文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.dmg" ]; then
              echo "已找到 x64 版本的 DMG 文件"
              echo "x64_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.dmg" >> "$GITHUB_OUTPUT"
              echo "x64_name=System-Resource-Monitor-mac-x64.dmg" >> "$GITHUB_OUTPUT"
            fi
            
            # 如果两个架构都找不到，列出目录内容以便调试
            if [ ! -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-arm64.dmg" ] && [ ! -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.dmg" ]; then
              echo "无法找到 DMG 文件，列出 dist 目录内容:"
              ls -la ./dist/
            fi
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            # 修改Windows文件路径检查，匹配不带架构标识的文件名
            echo "正在查找 Windows 安装文件..."
            # 检查不带架构标识的exe文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}.exe" ]; then
              echo "已找到可执行文件: System Resource Monitor-${{ steps.get-version.outputs.version }}.exe"
              echo "exe_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}.exe" >> "$GITHUB_OUTPUT"
            # 回退检查带架构标识的exe文件
            elif [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.exe" ]; then
              echo "已找到可执行文件: System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.exe"
              echo "exe_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.exe" >> "$GITHUB_OUTPUT"
            else
              echo "未找到 EXE 文件，列出 dist 目录内容:"
              ls -la ./dist/
            fi
            
            # 检查不带架构标识的msi文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}.msi" ]; then
              echo "已找到安装程序: System Resource Monitor-${{ steps.get-version.outputs.version }}.msi"
              echo "msi_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}.msi" >> "$GITHUB_OUTPUT"
            # 回退检查带架构标识的msi文件
            elif [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.msi" ]; then
              echo "已找到安装程序: System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.msi"
              echo "msi_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.msi" >> "$GITHUB_OUTPUT"
            fi
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux 文件路径 - 检查和设置所有 Linux 构建产物
            echo "正在查找 Linux 安装文件..."
            
            # 检查 AppImage 文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.AppImage" ]; then
              echo "已找到 AppImage 文件: System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.AppImage"
              echo "appimage_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.AppImage" >> "$GITHUB_OUTPUT"
            fi
            
            # 检查 deb 文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-amd64.deb" ]; then
              echo "已找到 DEB 包: System Resource Monitor-${{ steps.get-version.outputs.version }}-amd64.deb"
              echo "deb_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-amd64.deb" >> "$GITHUB_OUTPUT"
            fi
            
            # 检查 rpm 文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.rpm" ]; then
              echo "已找到 RPM 包: System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.rpm"
              echo "rpm_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.rpm" >> "$GITHUB_OUTPUT"
            fi
            
            # 检查 tar.gz 文件
            if [ -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.tar.gz" ]; then
              echo "已找到 tar.gz 文件: System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.tar.gz"
              echo "targz_path=./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.tar.gz" >> "$GITHUB_OUTPUT"
            fi
            
            # 如果没有找到任何文件，列出目录内容以便调试
            if [ ! -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.AppImage" ] && 
               [ ! -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-amd64.deb" ] && 
               [ ! -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x86_64.rpm" ] && 
               [ ! -f "./dist/System Resource Monitor-${{ steps.get-version.outputs.version }}-x64.tar.gz" ]; then
              echo "无法找到任何 Linux 安装文件，列出 dist 目录内容:"
              ls -la ./dist/
            fi
          fi
        shell: bash

      # 步骤14: 上传macOS ARM64构建产物到GitHub Release
      - name: Upload Release Assets (macOS ARM64)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'macos-latest' && steps.prepare-assets.outputs.arm64_path != ''
        with:
          # 要上传的文件路径
          files: ${{ steps.prepare-assets.outputs.arm64_path }}
          # GitHub访问令牌
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # Release的名称
          name: Release ${{ github.ref_name }}
          # 是否为草稿版本
          draft: false
          # 是否为预发布版本
          prerelease: false

      # 步骤15: 上传macOS x64构建产物到GitHub Release
      - name: Upload Release Assets (macOS x64)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'macos-latest' && steps.prepare-assets.outputs.x64_path != ''
        with:
          # 要上传的文件路径
          files: ${{ steps.prepare-assets.outputs.x64_path }}
          # GitHub访问令牌
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # Release的名称
          name: Release ${{ github.ref_name }}
          # 是否为草稿版本
          draft: false
          # 是否为预发布版本
          prerelease: false

      # 步骤16: 上传Linux构建产物到GitHub Release
      - name: Upload Release Assets (Linux)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          # 使用多行格式指定所有Linux构建产物
          files: |
            ${{ steps.prepare-assets.outputs.appimage_path }}
            ${{ steps.prepare-assets.outputs.deb_path }}
            ${{ steps.prepare-assets.outputs.rpm_path }}
            ${{ steps.prepare-assets.outputs.targz_path }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 步骤17: 上传Windows构建产物到GitHub Release
      - name: Upload Release Assets (Windows)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'windows-latest'
        with:
          # 使用多行格式指定多个文件，正确指定文件路径
          files: |
            ${{ steps.prepare-assets.outputs.exe_path }}
            ${{ steps.prepare-assets.outputs.msi_path }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
