name: Release Electron App

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"

      - name: Get Version from package.json
        id: get-version
        run: |
          VERSION=$(cat package.json | grep -o '"version": *"[^"]*"' | cut -d'"' -f4)
          echo "Package version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Print package.json version
        run: |
          echo "Package.json version:"
          cat package.json | grep version

      # macOS构建
      - name: Build macOS App
        if: matrix.os == 'macos-latest'
        run: yarn dist:mac
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Windows构建
      - name: Build Windows App
        if: matrix.os == 'windows-latest'
        run: yarn dist:win
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Linux构建
      - name: Build Linux App
        if: matrix.os == 'ubuntu-latest'
        run: yarn dist:linux
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: List dist directory
        run: |
          echo "Dist directory contents:"
          ls -la dist/

      # 准备发布资产的路径
      - name: Prepare asset paths
        id: prepare-assets
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "asset_path=./dist/vite-project-${{ steps.get-version.outputs.version }}.dmg" >> "$GITHUB_OUTPUT"
            echo "asset_name=vite-project-mac.dmg" >> "$GITHUB_OUTPUT"
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "assets=./dist/vite-project-${{ steps.get-version.outputs.version }}.exe#vite-project-win-portable.exe,./dist/vite-project-${{ steps.get-version.outputs.version }}.msi#vite-project-win-installer.msi" >> "$GITHUB_OUTPUT"
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "asset_path=./dist/vite-project-${{ steps.get-version.outputs.version }}.AppImage" >> "$GITHUB_OUTPUT"
            echo "asset_name=vite-project-linux.AppImage" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      # 使用更现代的GitHub Release操作
      - name: Upload Release Assets (macOS)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'macos-latest'
        with:
          files: ${{ steps.prepare-assets.outputs.asset_path }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (Linux)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          files: ${{ steps.prepare-assets.outputs.asset_path }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (Windows)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'windows-latest'
        with:
          files: |
            ./dist/vite-project-${{ steps.get-version.outputs.version }}.exe
            ./dist/vite-project-${{ steps.get-version.outputs.version }}.msi
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
